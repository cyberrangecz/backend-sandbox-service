"""
Django settings for crczp.sandbox_service_project project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from crczp.sandbox_common_lib.crczp_service_config import CrczpServiceConfig
from crczp.sandbox_common_lib.cloud_utils import get_aws_client, get_ostack_client

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

CRCZP_SANDBOX_SERVICE_CONFIG_PATH = os.path.join(BASE_DIR, 'tests/config.yml')
CRCZP_SERVICE_CONFIG = CrczpServiceConfig.from_file(CRCZP_SANDBOX_SERVICE_CONFIG_PATH)
CRCZP_CONFIG = CRCZP_SERVICE_CONFIG.app_config

# -----------SIMPLIFY CLOUD PROVIDER CHANGE-----------
# To reduce setup overhead, create Terraform client during startup of application.
AWS_PROVIDER_CONFIGURED = bool(CRCZP_CONFIG.aws)
TERRAFORM_CLIENT = get_aws_client(CRCZP_CONFIG) if AWS_PROVIDER_CONFIGURED \
                   else get_ostack_client(CRCZP_CONFIG)
# ----------------------------------------------------
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = CRCZP_SERVICE_CONFIG.django_secret_key

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = CRCZP_SERVICE_CONFIG.debug

ALLOWED_HOSTS = tuple(CRCZP_SERVICE_CONFIG.allowed_hosts)

# Application definition

CORS_ORIGIN_ALLOW_ALL = CRCZP_SERVICE_CONFIG.cors_origin_allow_all
CORS_ORIGIN_WHITELIST = tuple(CRCZP_SERVICE_CONFIG.cors_origin_whitelist)

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    'django_rq',

    'crczp.sandbox_ansible_app.apps.CrczpSandboxAnsibleAppConfig',
    'crczp.sandbox_definition_app.apps.CrczpSandboxDefinitionAppConfig',
    'crczp.sandbox_instance_app.apps.CrczpSandboxInstanceAppConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'crczp.sandbox_service_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crczp.sandbox_service_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': CRCZP_CONFIG.database.engine,
        'HOST': CRCZP_CONFIG.database.host,
        'NAME': CRCZP_CONFIG.database.name,
        'PASSWORD': CRCZP_CONFIG.database.password,
        'PORT': CRCZP_CONFIG.database.port,
        'USER': CRCZP_CONFIG.database.user
    },
}

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Prague'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = f'/{CRCZP_SERVICE_CONFIG.microservice_name}/static/'

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'crczp.sandbox_common_lib.exc_handler.custom_exception_handler',
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.AllowAny', ),

    'DEFAULT_PAGINATION_CLASS': 'crczp.sandbox_common_lib.pagination.PageNumberWithPageSizePagination',
    'PAGE_SIZE': 50,
}

SWAGGER_SETTINGS = {
    'DEFAULT_PAGINATOR_INSPECTORS': [
        'crczp.sandbox_common_lib.inspectors.PageNumberWithPageSizePaginationInspector',
        'drf_yasg.inspectors.DjangoRestResponsePagination',
        'drf_yasg.inspectors.CoreAPICompatInspector',
    ],
    "DEFAULT_GENERATOR_CLASS": "rest_framework.schemas.generators.BaseSchemaGenerator",
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'call_cache',
        'TIMEOUT': None,  # Expire never
        'OPTIONS': {
            'MAX_ENTRIES': 300  # Django default value is 300 (2 kB per item = 0.6 MB)
        }
    },
    'uag_auth_groups_cache': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'uag_auth_groups_cache',
        'OPTIONS': {
            'MAX_ENTRIES': 500
        }
    },
    'topology_cache': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'topology_cache',
        'TIMEOUT': None,
        'OPTIONS': {
            'CULL_FREQUENCY': 0,  # culls the entire cache, makes culling more efficient
            'MAX_ENTRIES': 300
        }
    },
}


SANDBOX_UAG = {
    # Need to be set when using JWTAccessTokenAuthentication,
    # which supports multiple OIDC providers (parsing them from the token).
    # Only those listed here will be allowed.
    'ALLOWED_OIDC_PROVIDERS': tuple(CRCZP_SERVICE_CONFIG.authentication.allowed_oidc_providers),

    # User and Group roles registration endpoint URL
    'ROLES_REGISTRATION_URL': None,
    # User and Group roles acquisition endpoint URL
    'ROLES_ACQUISITION_URL': None,
    # Path to roles definition file
    'ROLES_DEFINITION_PATH': None,

    # User and Group information configuration
    'MICROSERVICE_NAME': CRCZP_SERVICE_CONFIG.microservice_name,
    'ROLE_PREFIX': "ROLE",
    'ENDPOINT': __package__,
}

RQ_QUEUES = {
    'default': {
        'HOST': 'localhost',
        'PORT': 6379,
        'DB': 0,
    },
    'openstack': {
        'HOST': 'localhost',
        'PORT': 6379,
        'DB': 0,
    },
    'ansible': {
        'HOST': 'localhost',
        'PORT': 6379,
        'DB': 0,
    }
}

RQ_SHOW_ADMIN_LINK = True

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "rq_console": {
            'format': '%(asctime)s %(levelname)s %(message)s',
            "datefmt": "%H:%M:%S",
        },
    },
    "handlers": {
        "rq_console": {
            "level": CRCZP_CONFIG.log_level,
            "class": "rq.utils.ColorizingStreamHandler",
            "formatter": "rq_console",
            "exclude": ["%(asctime)s"],
        },
    },
    'loggers': {
        "rq.worker": {
            "handlers": ["rq_console"],
            "level": CRCZP_CONFIG.log_level,
        },
    }
}
